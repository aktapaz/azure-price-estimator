@page
@model GetPricesModel
@using System.Globalization
@{
    ViewData["Title"] = "Azure Price Estimator";
}

<h1 class="mb-4">@ViewData["Title"]</h1>

<form method="get" class="mb-4" novalidate>
    <div class="row g-3">
        <div class="col-md-6">
            <label for="location" class="form-label">Region</label>
            <select class="form-select" id="location" name="location" asp-for="Location">
                <option value="">Select Region</option>
                <option value="westeurope">EU West</option>
                <option value="northeurope">EU North</option>
                <option value="germanynorth">DE North</option>
                <option value="germanywestcentral">DE West Central</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="serviceFamily" class="form-label">Service Family</label>
            <select class="form-select" id="serviceFamily" name="serviceFamily" asp-for="ServiceFamily">
                <option value="">Select Service Family</option>
                <option value="Compute">Compute</option>
                <option value="Storage">Storage</option>
                <option value="Networking">Networking</option>
                <option value="Databases">Databases</option>
                <option value="Analytics">Analytics</option>
                <option value="AI + Machine Learning">AI + Machine Learning</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="serviceName" class="form-label">Service Name</label>
            <select class="form-select" id="serviceName" name="serviceName" asp-for="ServiceName">
                <option value="">Select Service</option>
                <option value="Virtual Machines">Virtual Machines</option>
                <option value="Storage">Storage</option>
                <option value="Networking">Networking</option>
                <option value="Databases">Databases</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="armSkuName" class="form-label">VM Size</label>
            <select class="form-select" id="armSkuName" name="armSkuName" asp-for="ArmSkuName">
                <option value="">Select Size</option>
                <optgroup label="General Purpose - Dsv3">
                    <option value="Standard_D2s_v3">D2s v3 (2 vCPU, 8 GB)</option>
                    <option value="Standard_D4s_v3">D4s v3 (4 vCPU, 16 GB)</option>
                    <option value="Standard_D8s_v3">D8s v3 (8 vCPU, 32 GB)</option>
                    <option value="Standard_D16s_v3">D16s v3 (16 vCPU, 64 GB)</option>
                    <option value="Standard_D32s_v3">D32s v3 (32 vCPU, 128 GB)</option>
                </optgroup>
                <optgroup label="Memory Optimized - Esv3">
                    <option value="Standard_E2s_v3">E2s v3 (2 vCPU, 16 GB)</option>
                    <option value="Standard_E4s_v3">E4s v3 (4 vCPU, 32 GB)</option>
                    <option value="Standard_E8s_v3">E8s v3 (8 vCPU, 64 GB)</option>
                    <option value="Standard_E16s_v3">E16s v3 (16 vCPU, 128 GB)</option>
                    <option value="Standard_E32s_v3">E32s v3 (32 vCPU, 256 GB)</option>
                </optgroup>
                <optgroup label="Compute Optimized - Fsv2">
                    <option value="Standard_F2s_v2">F2s v2 (2 vCPU, 4 GB)</option>
                    <option value="Standard_F4s_v2">F4s v2 (4 vCPU, 8 GB)</option>
                    <option value="Standard_F8s_v2">F8s v2 (8 vCPU, 16 GB)</option>
                    <option value="Standard_F16s_v2">F16s v2 (16 vCPU, 32 GB)</option>
                    <option value="Standard_F32s_v2">F32s v2 (32 vCPU, 64 GB)</option>
                </optgroup>
            </select>
        </div>

        <div class="col-md-6">
            <label for="currencyCode" class="form-label">Currency</label>
            <select class="form-select" id="currencyCode" name="currencyCode" asp-for="CurrencyCode">
                <option value="EUR">EUR (€)</option>
                <option value="USD">USD ($)</option>
                <option value="GBP">GBP (£)</option>
            </select>
        </div>

        <div class="col-md-6">
            <label for="usageHours" class="form-label">Usage Period</label>
            <select class="form-select" id="usageHours" name="usageHours" asp-for="UsageHours">
                <option value="730">Monthly (730 hours)</option>
                <option value="168">Weekly (168 hours)</option>
                <option value="24">Daily (24 hours)</option>
                <option value="8">Partial Day (8 hours)</option>
            </select>
        </div>

        <div class="col-12 mt-4">
            <button type="submit" class="btn btn-primary">Calculate Prices</button>
        </div>
    </div>
</form>

@if (Model.Prices != null && Model.Prices.Any())
{
    var culture = Model.CurrencyCode switch
    {
        "EUR" => new CultureInfo("fr-FR"),
        "GBP" => new CultureInfo("en-GB"),
        "USD" => new CultureInfo("en-US"),
        _ => new CultureInfo("fr-FR")
    };

        var filteredPrices = Model.Prices
        .Where(p => !string.IsNullOrEmpty(p.SkuName))
        .Where(p => 
            p.SkuName.Contains(Model.ArmSkuName ?? "", StringComparison.OrdinalIgnoreCase) &&
            !p.SkuName.Contains("Low Priority", StringComparison.OrdinalIgnoreCase) && 
            !p.SkuName.Contains("Spot", StringComparison.OrdinalIgnoreCase) &&
            !p.SkuName.Contains("AHUB", StringComparison.OrdinalIgnoreCase) &&
            !p.SkuName.Contains("Hybrid Benefit", StringComparison.OrdinalIgnoreCase)
        )
        .GroupBy(p => new { 
            p.ServiceName, 
            p.Location,
            PriceType = p.SkuName.Contains("3 Year") ? "3Year" :
                       p.SkuName.Contains("1 Year") ? "1Year" :
                       "PAYG"
        })
        .SelectMany(g => g.OrderBy(p => p.RetailPrice).Take(1))
        .OrderBy(p => 
            p.SkuName.Contains("3 Year") ? 2 :
            p.SkuName.Contains("1 Year") ? 1 : 
            0
        )
        .ToList();

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-light">
                <tr>
                    <th>Service</th>
                    <th>Family</th>
                    <th>SKU</th>
                    <th>Region</th>
                    <th class="text-end">Price/Hour</th>
                    <th class="text-end">Total Cost</th>
                    <th>Unit</th>
                </tr>
            </thead>
<tbody>
    @foreach (var price in filteredPrices)
    {
        string description = price.SkuName switch
        {
            var s when s.Contains("3 Year") => 
                "3-year commitment with upfront payment. Best value for long-term use.",
            var s when s.Contains("1 Year") => 
                "1-year commitment with upfront payment. Good balance of flexibility and savings.",
            var s when s.Contains("Reserved") => 
                "Reserved Instance pricing. Requires commitment but offers significant savings.",
            var s when s.Contains("Hybrid Benefit") => 
                "Special pricing for customers with existing Windows Server licenses.",
            _ => "Pay-as-you-go pricing. No commitment required, most flexible option."
        };

        var rowClass = price.SkuName.Contains("Hybrid Benefit", StringComparison.OrdinalIgnoreCase) 
            ? "table-success" 
            : "";

        <tr class="@rowClass">
            <td>@price.ServiceName</td>
            <td>@price.ServiceFamily</td>
            <td>
                @price.SkuName
                @if (price.SkuName.Contains("Hybrid Benefit", StringComparison.OrdinalIgnoreCase))
                {
                    <span class="badge bg-success">Azure Hybrid Benefit</span>
                }
            </td>
            <td>@price.Location</td>
            <td class="text-end">@price.RetailPrice.ToString("C", culture)</td>
            <td class="text-end">@((price.RetailPrice * Model.UsageHours).ToString("C", culture))</td>
            <td>@price.UnitOfMeasure</td>
            <td><small class="text-muted">@description</small></td>
        </tr>
    }
</tbody>
           
        </table>
    </div>
}